#!/bin/bash
# Source: http://www.onlamp.com/pub/a/linux/2000/11/16/LinuxAdmin.html

INSTANCE="${BLOCK_INSTANCE}"
INTERVAL="${BLOCK_INTERVAL}"
#INTERVAL="1"

# If you don't like you can use any other IP
INTERFACE="$(ip route get 8.8.8.8 | grep -Po '(?<=(dev )).*(?= src)')"

if [[ "${INSTANCE}" = "" ]]; then
  INSTANCE="${INTERFACE};both"
fi

DISPLAY=$(echo "${INSTANCE}" | awk -F ';' '{print $2}')
INSTANCE=$(echo "${INSTANCE}" | awk -F ';' '{print $1}')

status=$(cat /sys/class/net/${INSTANCE}/operstate)
if [[ "${status}" == "down" ]]; then
  exit
fi

if [[ "${DISPLAY}" = "" ]]; then
  DISPLAY="both"
fi

ONE_KB=1024
TEN_KB=$(echo "${ONE_KB}*10" | bc -l)
#echo "Ten K: $TEN_KB"
ONE_MB=$(echo "scale=0;${TEN_KB}*102.4" | bc -l)
#echo "One MB: $ONE_MB"
TEN_MB=$(echo "${ONE_MB}*10" | bc -l)
#echo "Ten MB: $TEN_MB"
ONE_GB=$(echo "scale=0;${TEN_MB}*102.4" | bc -l)
#echo "One GB: $ONE_GB"

URGENT_VALUE="${ONE_MB}"

PREV_IN=0
PREV_OUT=0

PREV_FILE="/tmp/.bandwidth"

if [[ -f "${PREV_FILE}" ]]; then
  PREV_CONT=$(cat "${PREV_FILE}")
  PREV_IN=$(echo "${PREV_CONT}" | head -n 1)
  PREV_OUT=$(echo "${PREV_CONT}" | tail -n 1)
  #echo "Prev_IN: $PREV_IN"
  #echo "Prev_OUT: $PREV_OUT"
fi

BANDWIDTH=$(grep "${INSTANCE}" /proc/net/dev | awk -F: '{print  $2}' | awk '{print $1" "$9}')
#echo "Bandwidth: ${BANDWIDTH}"

if [[ "${BANDWIDTH}" = "" ]]; then
  exit
fi

BYTES_IN=$(echo "${BANDWIDTH}" | awk -F ' ' '{print $1}')
BYTES_OUT=$(echo "${BANDWIDTH}" | awk -F ' ' '{print $2}')

function FormatNumber() {
  NUM=$(echo "scale=0;${1}/${INTERVAL}" | bc -l)
  if [[ $(echo "${NUM} > ${ONE_GB}" | bc -l) -ne 0 ]]; then
    #echo "Bigger one Gb: "
    printf "%4.1fgb"  $(echo "scale=1;${NUM}/${ONE_GB}" | bc -l)
    #echo "Bigger one Gb: "
  elif [[ $(echo "${NUM} > ${TEN_MB}" | bc -l) -ne 0 ]]; then
    printf "%4.0fmb"  $(echo "scale=0;${NUM}*10/${TEN_MB}" | bc -l)
  elif [[ $(echo "${NUM} > ${ONE_MB}" | bc -l) -ne 0 ]]; then
    printf "%4.1fmb"  $(echo "scale=1;${NUM}/${ONE_MB}" | bc -l)
  elif [[ $(echo "${NUM} > ${TEN_KB}" | bc -l) -ne 0 ]]; then
    #echo "Bigger than ten KB: "
    printf "%4.0fkb"  $(echo "scale=0;${NUM}*10/${TEN_KB}" | bc -l)
  elif [[ $(echo "${NUM} > ${ONE_KB}" | bc -l) -ne 0 ]]; then
    printf "%4.1fkb" $(echo "scale=1;${NUM}/${ONE_KB}" | bc -l)
  else
    printf "%5db" ${NUM}
  fi
}


if [[ "${PREV_IN}" != "" ]] && [[ "${PREV_OUT}" != "" ]]; then
  # Calculate the CPU usage since we last checked.
  DIFF_IN=$(echo "scale=0;${BYTES_IN} - ${PREV_IN}" | bc -l)
  DIFF_OUT=$(echo "scale=0;${BYTES_OUT} - ${PREV_OUT}" | bc -l)
  DIFF_TOTAL=0

  #DIFF_IN=15000000000

  #echo "Diff IN: ${DIFF_IN}"
  #echo "Diff OUT: ${DIFF_OUT}"


  USAGE_IN=$(FormatNumber "${DIFF_IN}")
  USAGE_OUT=$(FormatNumber "${DIFF_OUT}")

  if [[ "${DISPLAY}" = "both" ]]; then
    echo "${USAGE_IN}:${USAGE_OUT}"
    echo "${USAGE_IN}:${USAGE_OUT}"
    echo ""
    DIFF_TOTAL=$((DIFF_TOTAL+DIFF_IN))
    DIFF_TOTAL=$((DIFF_TOTAL+DIFF_OUT))
  elif [[ "${DISPLAY}" = "in" ]]; then
    echo "${USAGE_IN}"
    echo "${USAGE_IN}"
    echo ""
    DIFF_TOTAL=$((DIFF_TOTAL+DIFF_IN))
  elif [[ "${DISPLAY}" = "out" ]]; then
    echo "${USAGE_OUT}"
    echo "${USAGE_OUT}"
    echo ""
    DIFF_TOTAL=$((DIFF_TOTAL+DIFF_OUT))
  fi
else
  echo "?"
  echo "?"
  echo ""
fi

# Remember the total and idle CPU times for the next check.
printf "${BYTES_IN}\n${BYTES_OUT}\n" > "${PREV_FILE}"

if [[ $(echo "$DIFF_TOTAL/$INTERVAL>$URGENT_VALUE" | bc -l) -ne 0 ]]; then
  exit 33
fi